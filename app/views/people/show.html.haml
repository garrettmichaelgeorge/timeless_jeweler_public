- values = { addresses: { address_line_1: 'Address 1',
      address_line_2: 'Address 2',
      city: 'City',
      state_province: 'State',
      zip_postal_code: 'Zip' },
    phone_numbers: { phone_number: 'Phone' },
    email_addresses: { email_address: 'Email' } }

= render(PageHeaderComponent.new(title: t('.title', person_name: @person.name),
  pre_title: t('.subtitle'),
  buttons: [{ text: 'Edit Customer',
    link: edit_person_path(@person),
    options: nil }],
  tabs: nil))

.row
  .col-12.col-md-5
    = render ModelCardComponent.new(model: @person,
      attrs: [:id,
        :title,
        :first_name,
        :last_name,
        :suffix,
        :ring_size,
        :ring_size_notes,
        :necklace_length ])

  .col-12.col-md-7
    / Addresses
    - @person.addresses.each do |address|
      = render ModelCardComponent.new(model: address,
        attrs: [:address_line_1,
          :address_line_2,
          :city,
          :state_province,
          :zip_postal_code])

    / Phone Numbers
    - @person.phone_numbers.each do |phone_number|
      = render ModelCardComponent.new(model: phone_number,
        attrs: [:phone_number])

    / Email Addresses
    - @person.email_addresses.each do |email_address|
      = render ModelCardComponent.new(model: email_address,
        attrs: [:email_address])

    / Household
    = render ModelCardComponent.new(model: @person,
      attrs: [:anniversary,
        :household_members])

.row
  .col
    / Purchase History
    = render CardComponent.new do |component|
      - component.with(:header) do
        = render CardHeaderComponent.new(title: t('.purchase_history'))
      - component.with(:body) do
        .table-responsive{ data: { list: "" } }
          %table.table.table-sm.table-nowrap.card-table.table-hover{ id: t('.title', person_name: @person.name) }
            %thead
              %caption.px-4= t('.purchase_history')
              %tr
                / Label
                %th.mb-0.text-muted Sale ID
                %th.mb-0.text-muted Date
                %th.mb-0.text-muted Total
                %th.mb-0.text-muted Item
            %tbody
              - @person.purchases.each do |purchase|
                %tr
                  -# - values[:purchase_history].keys.each do |value|
                  / Value
                  %td.small
                    = link_to purchase.id, purchase
                  %td.small= purchase.occurred_at
                  %td.small= humanized_money_with_symbol(purchase.total)
                  %td.small
                    - purchase.items.each_with_index do |item, i|
                      = link_to item.id, item, data: { 'tippy-content' => item.name }, class: "tippy-instance"
                      = "| " unless i == purchase.items.size - 1

.row.justify-content-end
  .col.col-2
    = button_to "Delete customer", person_path(@person), method: :delete, class: "btn btn-danger lift"
