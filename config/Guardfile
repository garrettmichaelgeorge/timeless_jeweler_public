# A sample Guardfile
# More info at https://github.com/guard/guard#readme

## Uncomment and set this to only include directories you want to watch
directories %w[app config test] \
  .select { |d| Dir.exist?(d) ? d : UI.warning("Directory #{d} does not exist") }

## Note: if you are using the `directories` clause above and you are not
## watching the project directory ('.'), then you will want to move
## the Guardfile to a watched dir and symlink it back, e.g.
#
#  $ mkdir config
#  $ mv Guardfile config/
#  $ ln -s config/Guardfile .
#
# and, you'll have to watch "config/Guardfile" instead of "Guardfile"

guard :minitest, spring: 'bin/rails test', all_on_start: false do
  # with Minitest::Unit
  watch(%r{^test/(.*)\/?test_(.*)\.rb$})
  watch(%r{^lib/(.*/)?([^/]+)\.rb$})     { |m| "test/#{m[1]}test_#{m[2]}.rb" }
  watch(%r{^test/test_helper\.rb$})      { 'test' }

  # with Minitest::Spec
  # watch(%r{^spec/(.*)_spec\.rb$})
  # watch(%r{^lib/(.+)\.rb$})         { |m| "spec/#{m[1]}_spec.rb" }
  # watch(%r{^spec/spec_helper\.rb$}) { 'spec' }

  # Rails 4
  watch(%r{^app/(.+)\.rb$})                               { |m| "test/#{m[1]}_test.rb" }
  watch(%r{^app/controllers/application_controller\.rb$}) { 'test/controllers' }
  watch(%r{^app/controllers/(.+)_controller\.rb$})        { |m| "test/integration/#{m[1]}_test.rb" }
  watch(%r{^app/views/(.+)_mailer/.+})                    { |m| "test/mailers/#{m[1]}_mailer_test.rb" }
  watch(%r{^lib/(.+)\.rb$})                               { |m| "test/lib/#{m[1]}_test.rb" }
  watch(%r{^test/.+_test\.rb$})
  watch(%r{^test/test_helper\.rb$}) { 'test' }

  # # From Michael Hartl Rails tutorial
  # watch(%r{^test/(.*)/?(.*)_test\.rb$})
  # watch('test/test_helper.rb') { 'test' }
  # watch('config/routes.rb')    { integration_tests }
  # watch(%r{^app/models/(.*?)\.rb$}) do |matches|
  #   "test/models/#{matches[1]}_test.rb"
  # end
  # watch(%r{^app/controllers/(.*?)_controller\.rb$}) do |matches|
  #   resource_tests(matches[1])
  # end
  # watch(%r{^app/views/([^/]*?)/.*\.html\.erb$}) do |matches|
  #   ["test/controllers/#{matches[1]}_controller_test.rb"] +
  #     integration_tests(matches[1])
  # end
  # watch(%r{^app/helpers/(.*?)_helper\.rb$}) do |matches|
  #   integration_tests(matches[1])
  # end
  # watch('app/views/layouts/application.html.erb') do
  #   'test/integration/site_layout_test.rb'
  # end
  # # Returns the integration tests corresponding to the given resource.
  # def integration_tests(resource = :all)
  #   if resource == :all
  #     Dir['test/integration/*']
  #   else
  #     Dir["test/integration/#{resource}_*.rb"]
  #   end
  # end

  # Returns the controller tests corresponding to the given resource.
  def controller_test(resource)
    "test/controllers/#{resource}_controller_test.rb"
  end

  # Returns all tests for the given resource.
  def resource_tests(resource)
    integration_tests(resource) << controller_test(resource)
  end

  # Rails < 4
  # watch(%r{^app/controllers/(.*)\.rb$}) { |m| "test/functional/#{m[1]}_test.rb" }
  # watch(%r{^app/helpers/(.*)\.rb$})     { |m| "test/helpers/#{m[1]}_test.rb" }
  # watch(%r{^app/models/(.*)\.rb$})      { |m| "test/unit/#{m[1]}_test.rb" }
end

cucumber_options = {
  # Below are examples overriding defaults

  # cmd: 'bin/cucumber',
  cmd_additional_args: '--profile guard',

  # all_after_pass: false,
  all_on_start: false,
  # keep_failed: false,
  # feature_sets: ['features/frontend', 'features/experimental'],

  # run_all: { cmd_additional_args: '--profile guard_all' },
  # focus_on: { 'wip' }, # @wip
  notification: false
}

# guard 'cucumber', cucumber_options do
#   watch(%r{^features/.+\.feature$})
#   watch(%r{^features/support/.+$}) { 'features' }

#   watch(%r{^features/step_definitions/(.+)_steps\.rb$}) do |m|
#     Dir[File.join("**/#{m[1]}.feature")][0] || 'features'
#   end
# end

ctags_options = {
  binary: 'ctags-exuberant', # name of the ctags binary (default ctags)
  stdlib: true
}

guard 'ctags-bundler', src_path: ['app', 'lib', 'spec/support'] do
  watch(%r{^(app|lib|spec/support)/.*\.rb$})
  watch('Gemfile.lock')
end

guard :bundler do
  require 'guard/bundler'
  require 'guard/bundler/verify'
  helper = Guard::Bundler::Verify.new

  files = ['Gemfile']
  files += Dir['*.gemspec'] if files.any? { |f| helper.uses_gemspec?(f) }

  # Assume files are symlinked from somewhere
  files.each { |file| watch(helper.real_path(file)) }
end
